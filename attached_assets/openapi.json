{
    "openapi": "3.0.0",
    "info": {
      "title": "Slack Clone API",
      "version": "v1.0.1",
      "description": "Slack-like messaging platform with universal soft-deletes, selective partitioning, email-based verification, triggers for updatedAt, real-time features, error code enumeration, and recommended monorepo structure."
    },
    "servers": [
      {
        "url": "https://api.your-slack-clone.com/v1",
        "description": "Production server (v1)"
      },
      {
        "url": "http://localhost:3000/v1",
        "description": "Local development server (v1)"
      }
    ],
    "tags": [
      { "name": "Auth", "description": "Authentication endpoints" },
      { "name": "Users", "description": "User management (reactivation, etc.)" },
      { "name": "Workspaces", "description": "Workspace management (archived instead of removed)" },
      { "name": "Channels", "description": "Channel operations (soft-delete archived)" },
      { "name": "Messages", "description": "Message and thread operations (soft-deleted)" },
      { "name": "Files", "description": "File uploads and management" },
      { "name": "Emojis", "description": "Custom emoji (soft-deleted)" },
      { "name": "Search", "description": "Search across messages, channels, etc." },
      { "name": "Pinning", "description": "Pin/unpin messages" },
      { "name": "Reactions", "description": "Add/remove message reactions" }
    ],
    "paths": {
      "/auth/register": {
        "post": {
          "tags": ["Auth"],
          "summary": "Register a new user (email-based verification)",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": { "type": "string" },
                    "password": { "type": "string" },
                    "displayName": { "type": "string" }
                  },
                  "required": ["email", "password", "displayName"]
                }
              }
            },
            "description": "Creates a user record (deactivated=false) and sends a verification email."
          },
          "responses": {
            "201": {
              "description": "User created; verification email sent"
            },
            "400": {
              "description": "Invalid request data",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            },
            "409": {
              "description": "Email already in use",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/auth/verify-email": {
        "post": {
          "tags": ["Auth"],
          "summary": "Verify user email",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string" }
                  },
                  "required": ["token"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Email verified; user can now log in"
            },
            "400": {
              "description": "Invalid token or token expired",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "tags": ["Auth"],
          "summary": "User Login",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": { "type": "string" },
                    "password": { "type": "string" }
                  },
                  "required": ["email", "password"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthTokens"
                  }
                }
              }
            },
            "401": {
              "description": "INVALID_CREDENTIALS",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/auth/refresh": {
        "post": {
          "tags": ["Auth"],
          "summary": "Refresh Access Token",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refreshToken": { "type": "string" }
                  },
                  "required": ["refreshToken"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Token refreshed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthTokens"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid or expired token",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/auth/logout": {
        "post": {
          "tags": ["Auth"],
          "summary": "Logout user",
          "responses": {
            "200": { "description": "Logout successful" }
          }
        }
      },
      "/users": {
        "get": {
          "tags": ["Users"],
          "summary": "List all users",
          "parameters": [
            {
              "name": "deactivated",
              "in": "query",
              "description": "If true, returns only deactivated users",
              "schema": { "type": "boolean" }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of users (filtered by deactivated if provided)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Users"],
          "summary": "Create a new user (alternative to /auth/register)",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserCreateRequest" }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User created",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          }
        }
      },
      "/users/me": {
        "get": {
          "tags": ["Users"],
          "summary": "Get current authenticated user",
          "responses": {
            "200": {
              "description": "Current user details",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/User" }
                }
              }
            },
            "401": {
              "description": "UNAUTHORIZED",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/users/{userId}": {
        "get": {
          "tags": ["Users"],
          "summary": "Retrieve a specific user",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "User details",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/User" }
                }
              }
            },
            "404": {
              "description": "USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Users"],
          "summary": "Update a user's profile",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserUpdateRequest" }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User updated",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/User" }
                }
              }
            },
            "404": {
              "description": "USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Users"],
          "summary": "Deactivate (soft-delete) a user",
          "description": "Sets deactivated=TRUE, does not remove the user row.",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "User deactivated" },
            "404": {
              "description": "USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/users/{userId}/reactivate": {
        "post": {
          "tags": ["Users"],
          "summary": "Reactivate a previously deactivated user",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "User reactivated",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/User" }
                }
              }
            },
            "404": {
              "description": "USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/workspaces": {
        "get": {
          "tags": ["Workspaces"],
          "summary": "List all workspaces",
          "responses": {
            "200": {
              "description": "Array of workspaces",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Workspace" }
                  }
                }
              }
            }
          },
          "post": {
            "tags": ["Workspaces"],
            "summary": "Create a new workspace",
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/WorkspaceCreateRequest" }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Workspace created",
                "content": {
                  "application/json": {
                    "schema": { "$ref": "#/components/schemas/Workspace" }
                  }
                }
              }
            }
          }
        }
      },
      "/workspaces/{workspaceId}": {
        "get": {
          "tags": ["Workspaces"],
          "summary": "Get workspace details",
          "parameters": [
            {
              "name": "workspaceId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "Workspace details",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Workspace" }
                }
              },
              "404": {
                "description": "WORKSPACE_NOT_FOUND",
                "content": {
                  "application/json": {
                    "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Workspaces"],
          "summary": "Update a workspace",
          "parameters": [
            {
              "name": "workspaceId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkspaceUpdateRequest" }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Workspace updated",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Workspace" }
                }
              }
            },
            "404": {
              "description": "WORKSPACE_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Workspaces"],
          "summary": "Soft-delete (archive) a workspace",
          "description": "Sets archived=TRUE instead of physical removal.",
          "parameters": [
            {
              "name": "workspaceId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "Workspace archived" },
            "404": {
              "description": "WORKSPACE_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/workspaces/{workspaceId}/members": {
        "post": {
          "tags": ["Workspaces"],
          "summary": "Add a user to a workspace",
          "parameters": [
            {
              "name": "workspaceId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": { "type": "integer" },
                    "role": {
                      "type": "string",
                      "enum": ["OWNER", "ADMIN", "MEMBER", "GUEST"],
                      "default": "MEMBER"
                    }
                  },
                  "required": ["userId"]
                }
              }
            },
            "description": "Associates a user with the workspace."
          },
          "responses": {
            "201": { "description": "User added to workspace" },
            "404": {
              "description": "WORKSPACE_NOT_FOUND or USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Workspaces"],
          "summary": "Remove a user from a workspace",
          "parameters": [
            {
              "name": "workspaceId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            },
            {
              "name": "userId",
              "in": "query",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "User removed" },
            "404": {
              "description": "WORKSPACE_NOT_FOUND or USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/workspaces/{workspaceId}/channels": {
        "get": {
          "tags": ["Channels"],
          "summary": "List channels in a workspace",
          "parameters": [
            {
              "name": "workspaceId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            },
            {
              "name": "includeArchived",
              "in": "query",
              "schema": { "type": "boolean", "default": false }
            }
          ],
          "responses": {
            "200": {
              "description": "List of channels (archived excluded unless includeArchived=true)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Channel" }
                  }
                }
              }
            }
          }
        }
      },
      "/channels": {
        "get": {
          "tags": ["Channels"],
          "summary": "Global: list all channels (admin only)",
          "parameters": [
            {
              "name": "includeArchived",
              "in": "query",
              "schema": { "type": "boolean", "default": false }
            }
          ],
          "responses": {
            "200": {
              "description": "Global list of channels",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Channel" }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Channels"],
          "summary": "Global: create a channel",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChannelCreateRequest" }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Channel created",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Channel" }
                }
              }
            }
          }
        }
      },
      "/channels/{channelId}": {
        "get": {
          "tags": ["Channels"],
          "summary": "Get channel details (includes archived if it exists)",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "Channel info",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Channel" }
                }
              }
            },
            "404": {
              "description": "CHANNEL_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Channels"],
          "summary": "Update channel details",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChannelUpdateRequest" }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Channel updated",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Channel" }
                }
              }
            },
            "404": {
              "description": "CHANNEL_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Channels"],
          "summary": "Archive (soft-delete) a channel",
          "description": "Sets archived=TRUE instead of physical removal.",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "Channel archived" },
            "404": {
              "description": "CHANNEL_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/channels/{channelId}/members": {
        "post": {
          "tags": ["Channels"],
          "summary": "Add a member to the channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": { "type": "integer" }
                  },
                  "required": ["userId"]
                }
              }
            }
          },
          "responses": {
            "201": { "description": "User added to the channel" },
            "404": {
              "description": "CHANNEL_NOT_FOUND or USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Channels"],
          "summary": "Remove a member from the channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            },
            {
              "name": "userId",
              "in": "query",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "User removed from channel" },
            "404": {
              "description": "CHANNEL_NOT_FOUND or USER_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/channels/{channelId}/messages": {
        "get": {
          "tags": ["Messages"],
          "summary": "List messages in a channel with pagination (excluded deleted unless requested)",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": { "type": "integer", "default": 20 }
            },
            {
              "name": "offset",
              "in": "query",
              "schema": { "type": "integer", "default": 0 }
            },
            {
              "name": "before",
              "in": "query",
              "schema": { "type": "string", "format": "date-time" }
            },
            {
              "name": "includeDeleted",
              "in": "query",
              "schema": { "type": "boolean", "default": false }
            }
          ],
          "responses": {
            "200": {
              "description": "Array of messages",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Message" }
                  }
                }
              }
            },
            "404": {
              "description": "CHANNEL_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Messages"],
          "summary": "Send a message in the channel",
          "parameters": [
            {
              "name": "channelId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageCreateRequest" }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Message created",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Message" }
                }
              }
            }
          }
        }
      },
      "/messages/{messageId}": {
        "get": {
          "tags": ["Messages"],
          "summary": "Get message details (including soft-deleted if found)",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "Message details",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Message" }
                }
              },
              "404": {
                "description": "MESSAGE_NOT_FOUND",
                "content": {
                  "application/json": {
                    "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Messages"],
          "summary": "Update a message's content",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageUpdateRequest" }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Message updated",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Message" }
                }
              }
            },
            "404": {
              "description": "MESSAGE_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Messages"],
          "summary": "Soft-delete a message",
          "description": "Sets deleted=true for a Slack-like 'message removed' placeholder.",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "Message soft-deleted" },
            "404": {
              "description": "MESSAGE_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/messages/{messageId}/thread": {
        "get": {
          "tags": ["Messages"],
          "summary": "Retrieve replies in the thread (excludes deleted unless requested)",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "Array of thread messages",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Message" }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Messages"],
          "summary": "Post a reply in the thread",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageCreateRequest" }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Reply created",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Message" }
                }
              }
            }
          }
        }
      },
      "/messages/{messageId}/pin": {
        "post": {
          "tags": ["Pinning"],
          "summary": "Pin a message",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": false,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pinnedReason": { "type": "string" }
                  }
                }
              }
            }
          },
          "responses": {
            "201": { "description": "Message pinned" },
            "404": {
              "description": "MESSAGE_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        ""delete": {
          "tags": ["Pinning"],
          "summary": "Unpin a message",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "Message unpinned" },
            "404": {
              "description": "Pinned message not found",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/messages/{messageId}/reactions": {
        "get": {
          "tags": ["Reactions"],
          "summary": "Get all reactions for a message",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "Array of reactions",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Reaction" }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Reactions"],
          "summary": "Add a reaction to a message",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emojiId": { "type": "integer" }
                  },
                  "required": ["emojiId"]
                }
              }
            }
          },
          "responses": {
            "201": { "description": "Reaction added" },
            "404": {
              "description": "MESSAGE_NOT_FOUND or EMOJI_NOT_FOUND",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            },
            "409": { "description": "DUPLICATE_REACTION" }
          }
        }
      },
      "/messages/{messageId}/reactions/{reactionId}": {
        "delete": {
          "tags": ["Reactions"],
          "summary": "Remove a reaction from a message",
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            },
            {
              "name": "reactionId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "Reaction removed" },
            "404": {
              "description": "Reaction not found",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/files": {
        "post": {
          "tags": ["Files"],
          "summary": "Upload a file",
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": { "type": "string", "format": "binary" },
                    "messageId": { "type": "integer" }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "File uploaded",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/File" }
                }
              }
            }
          }
        }
      },
      "/files/{fileId}": {
        "get": {
          "tags": ["Files"],
          "summary": "Download or view a file",
          "parameters": [
            {
              "name": "fileId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": { "description": "File data or redirect to fileUrl" },
            "404": {
              "description": "File not found",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Files"],
          "summary": "Delete a file",
          "parameters": [
            {
              "name": "fileId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "File deleted" },
            "404": {
              "description": "File not found",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ErrorResponse" }
                }
              }
            }
          }
        }
      },
      "/emojis": {
        "get": {
          "tags": ["Emojis"],
          "summary": "List all custom emojis",
          "description": "Retrieve a paginated list of all custom emojis (excluding soft-deleted ones)",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 20
              },
              "description": "Number of items per page"
            }
          ],
          "responses": {
            "200": {
              "description": "List of emojis",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Emoji"
                        }
                      },
                      "pagination": {
                        "type": "object",
                        "properties": {
                          "currentPage": { "type": "integer" },
                          "totalPages": { "type": "integer" },
                          "totalItems": { "type": "integer" },
                          "itemsPerPage": { "type": "integer" }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": { "description": "Unauthorized" }
          }
        },
        "post": {
          "tags": ["Emojis"],
          "summary": "Create a new custom emoji",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 50
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Emoji created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Emoji"
                  }
                }
              }
            },
            "400": { "description": "Invalid request body" },
            "401": { "description": "Unauthorized" },
            "409": { "description": "Emoji code already exists" }
          }
        }
      },
      "/emojis/{emojiId}": {
        "get": {
          "tags": ["Emojis"],
          "summary": "Get a specific emoji",
          "parameters": [
            {
              "name": "emojiId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "Emoji details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Emoji"
                  }
                }
              }
            },
            "401": { "description": "Unauthorized" },
            "404": { "description": "Emoji not found" }
          }
        },
        "delete": {
          "tags": ["Emojis"],
          "summary": "Soft delete an emoji",
          "parameters": [
            {
              "name": "emojiId",
              "in": "path",
              "required": true,
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "204": { "description": "Emoji successfully deleted" },
            "401": { "description": "Unauthorized" },
            "404": { "description": "Emoji not found" }
          }
        }
      },
      "/search": {
        "get": {
          "tags": ["Search"],
          "summary": "Search across messages, channels, and users",
          "parameters": [
            {
              "name": "keyword",
              "in": "query",
              "schema": { "type": "string" }
            },
            {
              "name": "workspaceId",
              "in": "query",
              "schema": { "type": "integer" }
            }
          ],
          "responses": {
            "200": {
              "description": "Search results (excluding archived/deleted unless included)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "channels": {
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/Channel" }
                      },
                      "messages": {
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/Message" }
                      },
                      "users": {
                        "type": "array",
                        "items": { "$ref": "#/components/schemas/User" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "BearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "AuthTokens": {
          "type": "object",
          "properties": {
            "accessToken": { "type": "string" },
            "refreshToken": { "type": "string" }
          }
        },
        "ErrorResponse": {
          "type": "object",
          "properties": {
            "error": { "type": "string" },
            "details": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "USER_NOT_FOUND",
                    "WORKSPACE_NOT_FOUND",
                    "CHANNEL_NOT_FOUND",
                    "MESSAGE_NOT_FOUND",
                    "EMOJI_NOT_FOUND",
                    "INVALID_CREDENTIALS",
                    "UNAUTHORIZED",
                    "DUPLICATE_REACTION",
                    "FORBIDDEN"
                  ]
                },
                "message": { "type": "string" }
              }
            }
          }
        },
        "User": {
          "type": "object",
          "properties": {
            "userId": { "type": "integer" },
            "email": { "type": "string" },
            "displayName": { "type": "string" },
            "profilePicture": { "type": "string" },
            "statusMessage": { "type": "string" },
            "lastKnownPresence": {
              "type": "string",
              "enum": ["ONLINE", "AWAY", "DND", "OFFLINE"],
              "description": "Updated by a timer to reflect active or inactive."
            },
            "emailVerified": { "type": "boolean" },
            "deactivated": { "type": "boolean" },
            "theme": { "type": "string" },
            "createdAt": { "type": "string", "format": "date-time" },
            "updatedAt": { "type": "string", "format": "date-time" }
          }
        },
        "UserCreateRequest": {
          "type": "object",
          "properties": {
            "email": { "type": "string" },
            "password": { "type": "string" },
            "displayName": { "type": "string" }
          },
          "required": ["email", "password", "displayName"]
        },
        "UserUpdateRequest": {
          "type": "object",
          "properties": {
            "displayName": { "type": "string" },
            "profilePicture": { "type": "string" },
            "statusMessage": { "type": "string" },
            "theme": { "type": "string" }
          }
        },
        "Workspace": {
          "type": "object",
          "properties": {
            "workspaceId": { "type": "integer" },
            "name": { "type": "string" },
            "description": { "type": "string" },
            "archived": { "type": "boolean" },
            "createdAt": { "type": "string", "format": "date-time" },
            "updatedAt": { "type": "string", "format": "date-time" }
          }
        },
        "WorkspaceCreateRequest": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "description": { "type": "string" }
          },
          "required": ["name"]
        },
        "WorkspaceUpdateRequest": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "description": { "type": "string" },
            "archived": { "type": "boolean" }
          }
        },
        "Channel": {
          "type": "object",
          "properties": {
            "channelId": { "type": "integer" },
            "workspaceId": { "type": "integer", "nullable": true },
            "name": { "type": "string" },
            "topic": { "type": "string" },
            "channelType": {
              "type": "string",
              "enum": ["PUBLIC", "PRIVATE", "DM"]
            },
            "archived": { "type": "boolean" },
            "createdAt": { "type": "string", "format": "date-time" },
            "updatedAt": { "type": "string", "format": "date-time" }
          }
        },
        "ChannelCreateRequest": {
          "type": "object",
          "properties": {
            "workspaceId": { "type": "integer" },
            "name": { "type": "string" },
            "topic": { "type": "string" },
            "channelType": {
              "type": "string",
              "enum": ["PUBLIC", "PRIVATE", "DM"]
            }
          },
          "required": ["workspaceId", "name"]
        },
        "ChannelUpdateRequest": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "topic": { "type": "string" },
            "archived": { "type": "boolean" }
          }
        },
        "Message": {
          "type": "object",
          "properties": {
            "messageId": { "type": "integer" },
            "userId": { "type": "integer", "nullable": true },
            "channelId": { "type": "integer", "nullable": true },
            "workspaceId": { "type": "integer", "nullable": true },
            "parentMessageId": { "type": "integer", "nullable": true },
            "content": { "type": "string" },
            "deleted": { "type": "boolean" },
            "postedAt": { "type": "string", "format": "date-time" },
            "createdAt": { "type": "string", "format": "date-time" },
            "updatedAt": { "type": "string", "format": "date-time" }
          }
        },
        "MessageCreateRequest": {
          "type": "object",
          "properties": {
            "userId": { "type": "integer" },
            "content": { "type": "string" }
          },
          "required": ["userId", "content"]
        },
        "MessageUpdateRequest": {
          "type": "object",
          "properties": {
            "content": { "type": "string" }
          }
        },
        "File": {
          "type": "object",
          "properties": {
            "fileId": { "type": "integer" },
            "userId": { "type": "integer", "nullable": true },
            "messageId": { "type": "integer", "nullable": true },
            "filename": { "type": "string" },
            "fileType": { "type": "string" },
            "fileUrl": { "type": "string" },
            "fileSize": { "type": "integer" },
            "fileHash": { "type": "string" },
            "uploadTime": { "type": "string", "format": "date-time" }
          }
        },
        "Emoji": {
          "type": "object",
          "properties": {
            "emojiId": { "type": "integer" },
            "code": { "type": "string" },
            "deleted": { "type": "boolean" },
            "createdAt": { "type": "string", "format": "date-time" },
            "updatedAt": { "type": "string", "format": "date-time" }
          }
        },
        "EmojiCreateRequest": {
          "type": "object",
          "properties": {
            "code": { "type": "string" }
          },
          "required": ["code"]
        },
        "Reaction": {
          "type": "object",
          "properties": {
            "reactionId": { "type": "integer" },
            "messageId": { "type": "integer", "nullable": true },
            "emojiId": { "type": "integer" },
            "userId": { "type": "integer", "nullable": true },
            "createdAt": { "type": "string", "format": "date-time" },
            "updatedAt": { "type": "string", "format": "date-time" }
          }
        }
      }
    }
  }
}