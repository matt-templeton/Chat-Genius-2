[
  {
    "name": "WorkspaceNavigation",
    "description": "Lets users switch between and manage workspaces (archived=false by default).",
    "location": "Top of the sidebar or header.",
    "typedPropsExample": {
      "interfaceName": "WorkspaceNavigationProps",
      "interfaceDefinition": "
        /**
         * Props for the WorkspaceNavigation component.
         * Allows selecting an existing workspace or creating a new one.
         */
        interface WorkspaceNavigationProps {
          /**
           * The currently active workspace's ID.
           */
          currentWorkspaceId: number;

          /**
           * Array of available workspaces, possibly excluding archived.
           */
          workspaces: Array<{ workspaceId: number; name: string; archived?: boolean }>;

          /**
           * Callback when a user selects a different workspace.
           */
          onSelectWorkspace: (workspaceId: number) => void;

          /**
           * Callback to create a new workspace (archived=false by default).
           */
          onCreateWorkspace: (name: string, description?: string) => void;
        }
      "
    },
    "sub": [
      {
        "name": "WorkspaceSelector",
        "description": "Dropdown or list of workspaces to switch the active workspace.",
        "location": "Top of the sidebar or nav bar."
      },
      {
        "name": "CreateWorkspaceOverlay",
        "description": "Full-page wizard to create a new workspace (extends BaseOverlay).",
        "location": "Activated by 'Create Workspace' button.",
        "sub": [
          {
            "name": "WorkspaceNameInput",
            "description": "Field for entering workspace name/description.",
            "location": "Step 1 of the create workspace wizard."
          }
        ]
      }
    ]
  },
  {
    "name": "ChannelList",
    "description": "Displays all channels/DMs the user has in the current workspace. Excludes archived unless requested.",
    "location": "Left sidebar below Workspace Navigation.",
    "typedPropsExample": {
      "interfaceName": "ChannelListProps",
      "interfaceDefinition": "
        /**
         * Props for the ChannelList component.
         */
        interface ChannelListProps {
          channels: Array<{
            channelId: number;
            name: string;
            channelType: 'PUBLIC' | 'PRIVATE' | 'DM';
            archived?: boolean;
          }>;

          onChannelSelect: (channelId: number) => void;

          onCreateChannel: (params: {
            name: string;
            channelType?: 'PUBLIC' | 'PRIVATE' | 'DM';
          }) => void;
        }
      "
    },
    "sub": [
      {
        "name": "ChannelEntry",
        "description": "Individual channel item; click to open channel.",
        "location": "Inside the channel list."
      },
      {
        "name": "CreateChannelButton",
        "description": "Opens a modal for channel settings.",
        "location": "Near the channel list header."
      }
    ]
  },
  {
    "name": "DirectMessagesList",
    "description": "Lists direct or multi-user DMs. Each item references a DM channel.",
    "location": "Below the channel list in the sidebar.",
    "typedPropsExample": {
      "interfaceName": "DirectMessagesListProps",
      "interfaceDefinition": "
        /**
         * Props for the DirectMessagesList component.
         */
        interface DirectMessagesListProps {
          dms: Array<{
            channelId: number;
            participants: string[];
            lastMessage?: string;
            channelType: 'DM';
          }>;

          onDmSelect: (channelId: number) => void;

          onNewDm: (participantIds: number[]) => void;
        }
      "
    },
    "sub": [
      {
        "name": "DmEntry",
        "description": "Represents a single DM conversation.",
        "location": "Within the DM list container."
      },
      {
        "name": "NewDmButton",
        "description": "Opens an overlay to start a new DM.",
        "location": "DM list header."
      }
    ]
  },
  {
    "name": "MessageInputBox",
    "description": "Interface for composing and sending messages (with file uploads, emojis).",
    "location": "Bottom of the chat area.",
    "typedPropsExample": {
      "interfaceName": "MessageInputBoxProps",
      "interfaceDefinition": "
        /**
         * Props for the MessageInputBox component.
         */
        interface MessageInputBoxProps {
          onSendMessage: (content: string) => void;
          onUploadFile?: (file: File) => void;
          onEmojiInsert?: (emojiCode: string) => void;
          isTyping?: boolean;
        }
      "
    },
    "sub": [
      {
        "name": "TextInputArea",
        "description": "Where the user types the message.",
        "location": "Central portion of the input box."
      },
      {
        "name": "SendButton",
        "description": "Dispatches the typed message.",
        "location": "Next to the input."
      },
      {
        "name": "FileUploadButton",
        "description": "Select or drag-drop files for upload.",
        "location": "Near the input edges."
      },
      {
        "name": "EmojiPickerToggle",
        "description": "Opens the emoji picker to insert emojis.",
        "location": "Alongside other input actions."
      }
    ]
  },
  {
    "name": "ChatArea",
    "description": "Displays the current channel/DM conversation, messages, pinned items, threads. Hides messages with deleted=true unless specially handled.",
    "location": "Main central region of the interface.",
    "typedPropsExample": {
      "interfaceName": "ChatAreaProps",
      "interfaceDefinition": "
        /**
         * Props for the ChatArea component.
         */
        interface ChatAreaProps {
          messages: Array<{
            messageId: number;
            userId: number | null;
            content: string;
            postedAt: string;
            deleted?: boolean;
          }>;
          onReplyThread: (messageId: number) => void;
          onPinMessage?: (messageId: number, reason?: string) => void;
          onUnpinMessage?: (messageId: number) => void;
          onReact?: (messageId: number, emojiId: number) => void;
          onUnreact?: (messageId: number, reactionId: number) => void;
        }
      "
    },
    "sub": [
      {
        "name": "MessageDisplayArea",
        "description": "Scrollable list of messages; shows placeholder if deleted=true.",
        "location": "Main scrolled list."
      },
      {
        "name": "ThreadViewer",
        "description": "Displays replies in a dedicated panel.",
        "location": "Shown when viewing a thread."
      },
      {
        "name": "PinnedItemsPanel",
        "description": "Displays pinned messages with optional reason.",
        "location": "Toggled from the chat area."
      }
    ]
  },
  {
    "name": "BaseOverlay",
    "description": "A shared base component for overlays/modals across the app.",
    "location": "Generic location for modals.",
    "typedPropsExample": {
      "interfaceName": "BaseOverlayProps",
      "interfaceDefinition": "
        /**
         * Shared props for all overlays.
         */
        interface BaseOverlayProps {
          visible: boolean;
          onClose: () => void;
        }
      "
    }
  },
  {
    "name": "FileSharingOverlay",
    "description": "Interface for uploading/sharing files in a channel or DM, extends BaseOverlay.",
    "location": "Launched from the FileUploadButton or a menu.",
    "typedPropsExample": {
      "interfaceName": "FileSharingOverlayProps",
      "interfaceDefinition": "
        /**
         * Props for the FileSharingOverlay component.
         */
        interface FileSharingOverlayProps extends BaseOverlayProps {
          onUploadFiles: (files: File[], recipients?: number[]) => void;
        }
      "
    },
    "sub": [
      {
        "name": "FileUploadInterface",
        "description": "Drag-and-drop or file picker UI with progress bars.",
        "location": "Center of the overlay."
      },
      {
        "name": "RecipientSelectionPanel",
        "description": "Optional panel for choosing recipients beyond the current channel.",
        "location": "Side area of the overlay."
      },
      {
        "name": "UploadControlButtons",
        "description": "Confirm or cancel uploading files.",
        "location": "Overlay bottom."
      }
    ]
  },
  {
    "name": "SearchBar",
    "description": "Search across messages, files, or users with optional filters (includeArchived, includeDeleted).",
    "location": "Typically in the top header.",
    "typedPropsExample": {
      "interfaceName": "SearchBarProps",
      "interfaceDefinition": "
        /**
         * Props for the SearchBar component.
         */
        interface SearchBarProps {
          onSearch: (query: string, filters?: { workspaceId?: number; includeArchived?: boolean; includeDeleted?: boolean }) => void;
          defaultQuery?: string;
        }
      "
    },
    "sub": [
      {
        "name": "SearchInputField",
        "description": "The text input for entering the search query.",
        "location": "Center of the search bar."
      },
      {
        "name": "SearchFilterDropdown",
        "description": "Filter results by type, date, or user, plus archived/deleted toggles.",
        "location": "Next to the input field."
      }
    ]
  },
  {
    "name": "UserPresenceIndicator",
    "description": "Displays a user's presence (ONLINE, AWAY, DND, OFFLINE). Updated by a timer from the backend.",
    "location": "Near user avatars in DMs or user profiles.",
    "typedPropsExample": {
      "interfaceName": "UserPresenceIndicatorProps",
      "interfaceDefinition": "
        /**
         * Props for UserPresenceIndicator.
         */
        interface UserPresenceIndicatorProps {
          userId: number;
          lastKnownPresence: 'ONLINE' | 'AWAY' | 'DND' | 'OFFLINE';
        }
      "
    },
    "sub": [
      {
        "name": "StatusIcon",
        "description": "A small badge reflecting the presence state.",
        "location": "Overlay on the user avatar."
      }
    ]
  },
  {
    "name": "UserStatusUpdateOverlay",
    "description": "Dialog for users to set/change custom status with optional emoji, extends BaseOverlay.",
    "location": "Accessed by clicking the user’s avatar or presence icon.",
    "typedPropsExample": {
      "interfaceName": "UserStatusUpdateOverlayProps",
      "interfaceDefinition": "
        /**
         * Overlay for updating a user's custom status message.
         */
        interface UserStatusUpdateOverlayProps extends BaseOverlayProps {
          currentStatusMessage?: string;
          onSave: (newStatus: string, emojiCode?: string) => void;
        }
      "
    },
    "sub": [
      {
        "name": "StatusInputField",
        "description": "Input field for typing a custom status message.",
        "location": "Center of the overlay."
      },
      {
        "name": "StatusEmojiSelector",
        "description": "Picker for an emoji to display alongside the status.",
        "location": "Next to the input field."
      }
    ]
  },
  {
    "name": "EmojiReactionPicker",
    "description": "Pop-up for selecting emojis to react to a message. Omits emojis with deleted=true.",
    "location": "Appears on 'Add Reaction' action.",
    "typedPropsExample": {
      "interfaceName": "EmojiReactionPickerProps",
      "interfaceDefinition": "
        /**
         * Props for the EmojiReactionPicker.
         */
        interface EmojiReactionPickerProps {
          onSelectEmoji: (emojiCode: string) => void;
          recentEmojis?: string[];
        }
      "
    },
    "sub": [
      {
        "name": "EmojiCategoryTabs",
        "description": "Tabs for switching between categories of emojis.",
        "location": "Top of the picker."
      },
      {
        "name": "EmojiSearchField",
        "description": "Search field for looking up emojis by name.",
        "location": "Above the emoji grid."
      }
    ]
  },
  {
    "name": "PreferencesOverlay",
    "description": "Settings for notifications, theme, and account details. Extends BaseOverlay.",
    "location": "Opened via a profile or settings icon.",
    "typedPropsExample": {
      "interfaceName": "PreferencesOverlayProps",
      "interfaceDefinition": "
        /**
         * Props for PreferencesOverlay.
         */
        interface PreferencesOverlayProps extends BaseOverlayProps {
          currentTheme: 'light' | 'dark';
          onThemeChange: (theme: 'light' | 'dark') => void;
          onUpdateNotifications: (settings: any) => void;
        }
      "
    },
    "sub": [
      {
        "name": "NotificationSettings",
        "description": "Configure mention notifications, do-not-disturb, etc.",
        "location": "Top area."
      },
      {
        "name": "ThemeSelection",
        "description": "Choose between light/dark theme.",
        "location": "Center area."
      },
      {
        "name": "AccountManagement",
        "description": "Edit profile or external accounts linking.",
        "location": "Bottom area."
      }
    ]
  },
  {
    "name": "NewChannelGroupCreationOverlay",
    "description": "Wizard for creating a new channel or DM group, extends BaseOverlay.",
    "location": "Accessed from the Channel List or a plus icon in the sidebar.",
    "typedPropsExample": {
      "interfaceName": "NewChannelGroupCreationOverlayProps",
      "interfaceDefinition": "
        /**
         * Props for creating a new channel or DM group.
         */
        interface NewChannelGroupCreationOverlayProps extends BaseOverlayProps {
          onCreate: (
            name: string,
            channelType: 'PUBLIC' | 'PRIVATE' | 'DM',
            userIds?: number[]
          ) => void;
        }
      "
    }
  }
]
